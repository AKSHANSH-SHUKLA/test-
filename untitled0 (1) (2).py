# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12hgb94xuFDUqd_9ahsL_iJ6IpXM7eg6w
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("omkargurav/face-mask-dataset")

print("Path to dataset files:", path)

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#dataset api
!kaggle datasets download -d omkargurav/face-mask-dataset

import zipfile
zip_ref=zipfile.ZipFile('/content/face-mask-dataset.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
import matplotlib.image as mpimg
from PIL import Image #image processing k liye lib
from sklearn.model_selection import train_test_split

with_mask_files=os.listdir('/content/data/with_mask')#with_mask waale saare files ka names ek nayi list mein store karta

without_mask_files=os.listdir('/content/data/without_mask')

print('no of masked images:',len(with_mask_files))
print('no of unmasked images:',len(without_mask_files))

#creating labels for the 2 class of images
#with-mask=1, without_mask=0
with_mask_labels=[1]*3725
without_mask_labels=[0]*3828

with_mask_labels[0:5]

#combining 2 lists into 1
labels=with_mask_labels+without_mask_labels
print(len(labels))
print(labels[0:5])
print(labels[-5:])

img=cv2.imread('/content/data/with_mask/with_mask_1004.jpg')
plt.imshow(img)

#image processing:
#resizing the images
#converting to numoy array

test_img=cv2.resize(img,(128,128))
img=test_img.reshape((1,128,128,3))

#reading the images
with_mask_path='/content/data/with_mask/'#last mein / imp hai
data=[]
labels=[]
for img_file in with_mask_files:
  image=Image.open(with_mask_path+img_file)#with_mask_files mein saari mask waali images ka path hai
  image=image.resize((128,128))
  image=image.convert('RGB')#to convert all images to black and white
  image=np.array(image)#image to numpY ARRAY
  data.append(image)#appending numpy array to data
  labels.append(1)

without_mask_path='/content/data/without_mask/'#last mein / imp hai

for img_file in without_mask_files:
  image=Image.open(without_mask_path+img_file)#with_mask_files mein saari mask waali images ka path hai
  image=image.resize((128,128))
  image=image.convert('RGB')#to convert all images to black and white
  image=np.array(image)#image to numpY ARRAY
  data.append(image)
  labels.append(0)

len(data)

data[0].shape

import tensorflow as tf

data[0]

#converting image list and label list to np array

X=np.array(data)
y=np.array(labels)

type(X)

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

X_train_scaled= X_train/255
X_test_scaled= X_test/255

#building CNN

from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout

num_of_classes=2
model=Sequential()

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2),strides=2))

model.add(Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=2))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.2))#to reduce overfitting


model.add(Dense(num_of_classes,activation='sigmoid'))#output layer

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

from tensorflow.keras.utils import to_categorical

y_train = to_categorical(y_train, num_classes=2)  # One-hot encode y_train
y_test = to_categorical(y_test, num_classes=2)    # One-hot encode y_test

history=model.fit(X_train_scaled,y_train,validation_split=0.1,epochs=10)

loss,accuracy=model.evaluate(X_test_scaled,y_test)
print('Test Accuracy=',accuracy)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train_acc','validation_acc'],loc='upper left')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train_loss','validation_loss'],loc='upper left')

#predictive system

input_image_path=input('enter path of the inage to be predicted:')
input_image=cv2.imread(input_image_path)
plt.imshow(input_image)
input_image_resized=cv2.resize(input_image,(128,128))
input_image_scaled=input_image_resized/255
input_image_reshape=np.reshape(input_image_scaled,(1,128,128,3))


input_image_prediction=model.predict(input_image_reshape)
print(input_image_prediction)

input_pred_label=np.argmax(input_image_prediction)
print(input_pred_label)

#if input_pred_label>0.5:
  #print('the person is wearing mask')
#else:
  #print('the person is not wearing mask')

